#!/usr/bin/env node

// This file is distributed under the MIT license.
// See LICENSE file in the project root for details.

'use strict';

const { promisify } = require('util');

const fs = require('fs');
const streamToString = require('stream-to-string');
const lib = require('../lib');

const readFile = promisify(fs.readFile);

const HELP = `
  Description:
`;

lib.cli.program
  .description(
    'Compute a difference from a baselin package set')
  .option(
    '--stdin',
    'read package specifiers from STDIN before reading from arguments')
  .arguments(
    '[baseline] [subject]')
  .allowUnknownOption()  // for '--no-color'
  .on('--help', () => console.log(HELP))
  .action(async (baselineFile, subjectFile, options) => {
    let baselineJson, subjectJson;
    if (options.stdin) {
      [baselineJson, subjectJson] =
        (await streamToString(process.stdin)).split('\n');
      if (baselineJson === undefined) {
        throw new Error('no baseline data read from STDIN');
      }
      if (baselineFile) {
        if (baselineFile) {
          subjectJson = await readFile(baselineFile, { encoding: 'utf8' });
        }
      }
      if (subjectJson === undefined) {
        throw new Error('no subject data')
      }
    } else {
      if (baselineFile === undefined) {
        throw new Error('no baseline file specified in arguments');
      }
      if (subjectFile === undefined) {
        throw new Error('no subject file specified in arguments');
      }
      baselineJson = await readFile(baselineFile,{ encoding: 'utf8' });
      subjectJson = await readFile(subjectFile,{ encoding: 'utf8' });
    }
    const baseline = JSON.parse(baselineJson);
    const subject = JSON.parse(subjectJson);
    const deltaAnalysis = lib.analyze.delta(baseline, subject);
    console.log(JSON.stringify(deltaAnalysis));
  })
  .parse(process.argv);
