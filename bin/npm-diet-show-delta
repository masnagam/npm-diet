#!/usr/bin/env node

// This file is distributed under the MIT license.
// See LICENSE file in the project root for details.

'use strict';

const lib = require('../lib');

const HELP = `
  Arguments:

    analysis  JSON file which contains a delta analysis (optional)

  Description:

    This command loads a delta analysis JSON data from a file or STDIN, and
    shows the size of each package in a table format.
`;

lib.cli.program
  .description(
    'Show details of a delta analysis')
  .option(
    '-I, --no-increase-table',
    'hide the increase table')
  .option(
    '-D, --no-decrease-table',
    'hide the decrease table')
  .option(
    '-C, --no-common-table',
    'hide the common table')
  .option(
    '-t, --top <num>',
    'show only the top `num` packages in each table',
    parseInt)
  .option(
    '-i, --increase-top <num>',
    'show only the top `num` packages in the increase table',
    parseInt)
  .option(
    '-d, --decrease-top <num>',
    'show only the top `num` packages in the increase table',
    parseInt)
  .option(
    '-c, --common-top <num>',
    'show only the top `num` packages in the increase table',
    parseInt)
  .option(
    '--ascii',
    'show as ASCII-art table')
  .arguments(
    '[analysis]')
  .on('--help', () => console.log(HELP))
  .action(async (filepath, options) => {
    if (options.top !== undefined) {
      if (options.increaseTop === undefined) {
        options.increaseTop = options.top;
      }
      if (options.decreaseTop === undefined) {
        options.decreaseTop = options.top;
      }
      if (options.commonTop === undefined) {
        options.commonTop = options.top;
      }
    }
    const json = await lib.cli.utils.readStringFromFileOrStdin(filepath);
    const analysis = JSON.parse(json);
    if (analysis.type !== 'delta') {
      throw new Error('invalid analysis type');
    }
    lib.show.delta.details(analysis, options);
  })
  .parse(process.argv);
