#!/usr/bin/env node

// This file is distributed under the MIT license.
// See LICENSE file in the project root for details.

'use strict';

const path = require('path');
const lib = require('../lib');

const HELP = `
  Description:

    This command extracts dependent packages described in package.json which are
    loaded from a file or STDIN.

    The result is formatted as a JSON array of package specifiers, and output to
    STDOUT.

  Relative paths:

    Relative paths which start with 'file:' are resolved into absolute paths
    using the package root path as the base path.

  Examples:

    Output dependent packages including devDependencies:

      $ npm-diet pkg-deps --dev path/to/package.json

    Make an analysis of dependent packages described in package.json:

      $ npm-diet pkg-deps path/to/package.json | npm-diet measure --stdin
`;

lib.cli.program
  .description(
    'Extract dependent packages described in package.json')
  .option(
    '--dev',
    'include package names in devDependencies')
  .option(
    '--peer',
    'include package names in peerDependencies')
  .allowUnknownOption()  // for '--no-color'
  .arguments(
    '<package-json>')
  .on('--help', () => console.log(HELP))
  .action(async (filepath, options) => {
    const json = await lib.cli.utils.readStringFromFileOrStdin(filepath);
    const packageJson = JSON.parse(json);
    let deps = packageJson.dependencies;
    if (options.dev && packageJson.devDependencies) {
      deps = Object.assign({}, deps, packageJson.devDependencies);
    }
    if (options.peer && packageJson.peerDependencies) {
      deps = Object.assign({}, deps, packageJson.peerDependencies);
    }
    const pkgDir = path.dirname(path.resolve(filepath));
    const specs = lib.cli.utils.convertDepsToSpecs(deps, pkgDir);
    console.log(JSON.stringify(specs));
  })
  .parse(process.argv);
